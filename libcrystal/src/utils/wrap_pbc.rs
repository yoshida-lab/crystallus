// Copyright 2022 TsumiNa
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use super::pbc::{lll_reduce as _lll, pbc_all_distances as _pbc};

use crate::Float;
use ndarray::arr2;
use std::error::Error;

#[inline]
pub fn lll_reduce(basis: &Vec<[Float; 3]>, delta: Float) -> (Vec<Float>, Vec<Float>) {
    let basis = arr2(basis);
    let (basis, mapping) = _lll(&basis, Some(delta));
    (basis.into_raw_vec(), mapping.into_raw_vec())
}

#[inline]
pub fn pbc_all_distances(
    lattice: &Vec<[Float; 3]>,
    frac_coords: &Vec<[Float; 3]>,
) -> Result<Vec<Float>, Box<dyn Error>> {
    let (lattice, frac_coords) = (arr2(lattice), arr2(frac_coords));
    let distances = _pbc(&lattice, &frac_coords)?;
    Ok(distances.into_raw_vec())
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::error::Error;
    #[test]
    fn test_lll_reduce() -> Result<(), Box<dyn Error>> {
        // lattice and frac coords are generated by this generator under space group 63,
        // and the following values are validated by pymatgen
        let lattice = vec![
            [14.019043922424316, 0.0, -6.127918936726928e-07],
            [
                -4.818087404601101e-07,
                6.381750106811523,
                -2.7895515586351394e-07,
            ],
            [0.0, 0.0, 9.891742706298828],
        ];
        let (basis, mapping) = lll_reduce(&lattice, 0.75);
        assert_eq!(
            &basis,
            &[
                -4.818087404601101e-07,
                6.381750106811523e+00,
                -2.7895515586351394e-07,
                0.00000000e+00,
                0.00000000e+00,
                9.891742706298828e+00,
                1.4019043922424316e+01,
                0.00000000e+00,
                -6.127918936726928e-07
            ],
            // epsilon = 1e-7
        );
        assert_eq!(mapping, vec![0., 1., 0., 0., 0., 1., 1., 0., 0.]);

        Ok(())
    }
}
